package net.lovememo.euler.Problem51_75

import end
import start

/**
 * Author: lovememo
 * Date: 18-6-10
 * Problem Description:
 * Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	    P4,n=n2	            1, 4, 9, 16, 25, ...
Pentagonal	 	P5,n=n(3n*1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	P6,n=n(2n*1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P7,n=n(5n*3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 	P8,n=n(3n*2)	 	1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
 */

fun main(args: Array<String>) {
    start()
    val totalList = calc()
    totalList.forEach {
        it.forEach {
            print("$it ")
        }
        println()
    }
    val startIndex = 0
    val startList = totalList[startIndex]

    for (j in 0 until startList.size) {
        val list = emptyList<Int>().toMutableList()
        list.add(startList[j])
        var mark = Mark()
//        mark.cache.add(startList[j])
        mark.startIndex = startIndex
        traversalList(totalList, list, mark)
    }
    end()
}



fun traversalList(totalList:MutableList<MutableList<Int>>, searchTarget:MutableList<Int>, mark:Mark) {
    if(mark.isLast()) {
        var index = mark.getIndex()
        val searchList = totalList[index]
        searchTarget.forEach {
            //print("$it ")
            mark.cache.add(it)
            val result = searchList.subListDigitStartWith(it.lastTwoDigit())
            if(result.size > 0) {
                for(num in result) {
                    if(num.lastTwoDigit() == mark.cache[0].firstTwoDigit()) {
                        mark.cache.add(num)
                        println(mark.cache)
                        println("success")
                    }
                }
                mark.cache.addAll(result)
                println(mark.cache)
                println("success!")
                return
            }
        }
        //println("failed")
        return
    }
    var markTemp = mark.clone()
    while(!mark.isLast()) {
        var index = mark.getIndex()
        var markTempTemp = markTemp.clone()
        markTempTemp.acquireIndex(index)
        val searchList = totalList[index]
        searchTarget.forEach {
            //print("$it ")
            markTempTemp.cache.add(it)
            val result = searchList.subListDigitStartWith(it.lastTwoDigit())
            if (result.size > 0) {
                return traversalList(totalList, result, markTempTemp)
            }
        }
        //println("failed")
    }
}

fun Int.lastTwoDigit():Int {
    return this.toString().substring(2).toInt()
}

fun Int.firstTwoDigit():Int {
    return this.toString().substring(0,2).toInt()
}

fun MutableList<Int>.subListDigitStartWith(num:Int):MutableList<Int> {
    return this.filter { it.firstTwoDigit() == num }.toMutableList()
}

fun calc():MutableList<MutableList<Int>> {
    val totalList = emptyList<MutableList<Int>>().toMutableList()
    arrayOf(
            "triangle" to triangle,
            "square" to square,
            "pentagonal" to pentagonal,
            "hexagonal" to hexagonal,
            "heptagonal" to heptagonal,
            "octagonal" to octagonal
    ).forEach {
        val startNum = getFirstNumBelow(1000)(it.second)()
        val endNum = getFirstNumBelow(10000)(it.second)() - 1
        val list = emptyList<Int>().toMutableList()
        looper(startNum, endNum)(it.second, list)()
        totalList.add(list)
    }
    return totalList
}

val getFirstNumBelow = { n: Int ->
    { figurate: (Int) -> Int ->
        {
            var count = 0
            while (figurate(++count) < n) {
            }
            count
        }
    }
}


val looper = { start: Int, end: Int ->
    { objFun: (Int) -> Int, list: MutableList<Int> ->
        {
            for (i: Int in start..end) {
                list.add(objFun(i))
            }
        }
    }
}
class Mark {
    var startIndex:Int = -1
    var cache:MutableList<Int> = emptyList<Int>().toMutableList()
    fun isLast():Boolean {
        return 5 == this.count
    }

    fun acquireIndex(index:Int) {
//        println("acquireIndex : $index")
        if(index == startIndex && count != 5) {
            throw Exception("can not acquire first index")
        }
        if(index>5) {
            throw IllegalArgumentException("index must be less than 6")
        }
        if(0 != this.array[index]) {
            throw IllegalAccessException("index $index has been acquired")
        }
        this.array[index] = 1
        this.count ++
    }

    fun getIndex():Int {
        for(i in 0 until this.array.size) {
            if(i == startIndex && this.count != 5) {
                continue
            }
            if(0 == array[i]) {
                count ++
                array[i] = 1
//                println("getIndex : $i")
                return i
            }

        }
        return -1
    }

    var count:Int = 0

    var array = arrayOf(0, 0, 0, 0, 0, 0)

    fun clone():Mark {
        var mark = Mark()
        mark.count = this.count
        mark.array = this.array.clone()
        mark.startIndex = this.startIndex
        mark.cache.addAll(this.cache)
        return mark
    }
}
val triangle = { n: Int ->
    n * (n + 1) / 2
}

val square = { n: Int ->
    n * n
}

val pentagonal = { n: Int ->
    n * (3 * n - 1) / 2
}

val hexagonal = { n: Int ->
    n * (2 * n - 1)
}

val heptagonal = { n: Int ->
    n * (5 * n - 3) / 2
}

val octagonal = { n: Int ->
    n * (3 * n - 2)
}


